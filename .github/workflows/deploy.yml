name: Deploy FastAPI to App Runner

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  ECR_REPOSITORY: fastapi-backend
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest httpx pytest-asyncio

    - name: Set up test environment variables
      run: |
        echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb" >> $GITHUB_ENV
        echo "ENVIRONMENT=testing" >> $GITHUB_ENV

    - name: Wait for PostgreSQL
      run: |
        until pg_isready -h localhost -p 5432 -U testuser; do
          echo "Waiting for PostgreSQL..."
          sleep 2
        done

    - name: Run database migrations/setup
      run: |
        # Add your database setup commands here
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'postgresql://testuser:testpassword@localhost:5432/testdb'
        from main import app
        print('FastAPI app with database connection tested successfully')
        "

    - name: Run tests
      run: |
        # Run your actual tests here
        # pytest tests/ -v || echo "No tests found, skipping..."
        # Alternative: run a simple import test
        python -c "
        import os
        os.environ['DATABASE_URL'] = 'postgresql://testuser:testpassword@localhost:5432/testdb'
        os.environ['ENVIRONMENT'] = 'testing'
        from main import app
        print('‚úÖ FastAPI application imported and configured successfully')
        "

  deploy:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push images to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Deploy to App Runner
      id: deploy-apprunner
      uses: awslabs/amazon-app-runner-deploy@main
      with:
        service: fastapi-production-service
        image: ${{ steps.build-image.outputs.image }}
        access-role-arn: ${{ secrets.ROLE_ARN }}
        region: ${{ secrets.AWS_REGION }}
        cpu: 1
        memory: 2
        port: 8080
        wait-for-service-stability: true
        copy-env-vars: |
          ENVIRONMENT=production
          PYTHONPATH=/app
          DATABASE_URL=${{ secrets.DATABASE_URL }}

    - name: Production Service Details
      run: |
        echo "üöÄ FastAPI Production Service Deployed Successfully!"
        echo "=============================================="
        echo "Service ID: ${{ steps.deploy-apprunner.outputs.service-id }}"
        echo "Service URL: ${{ steps.deploy-apprunner.outputs.service-url }}"
        echo "üìñ API Documentation: ${{ steps.deploy-apprunner.outputs.service-url }}/docs"
        echo "üîç Health Check: ${{ steps.deploy-apprunner.outputs.service-url }}/health"
        echo "=============================================="